//#version 430


//// World transformation
//uniform mat4 mMatrix;
//uniform mat4 m_noRartionMatrix;

//// View Transformation
//uniform mat4 vMatrix;
//// Projection transformation
//uniform mat4 pMatrix;
//uniform vec4 viewport;

//uniform int  y_axis;
//uniform int  x_axis;

//struct SSBO_datum {
//    vec4 color;
//    vec4 center;
//    vec4 info;
//    vec2 layout1;
//    vec2 layout2;
//};

//layout (std430, binding=2) buffer mesh_data
//{
//    SSBO_datum SSBO_data[];
//};

//struct properties {
//    vec2 pos_alpha;
//    vec2 trans_alpha;
//    vec2 color_alpha;
//    vec2 point_size;
//    vec2 interval;
//    vec2 positions;
//    vec4 render_type; // mesh triangles, mesh points, points skeleton, graph (points, edges)
//    vec4 extra_info;  // x: axis type, y, z, w: empty slots
//};

//struct ast_neu_properties {
//    properties ast;
//    properties neu;
//};

//layout (std430, binding=3) buffer space2d_data
//{
//    ast_neu_properties space2d;
//};


//float translate(float value, float leftMin, float leftMax, float rightMin, float rightMax)
//{
//    // if value < leftMin -> value = leftMin
//    value = max(value, leftMin);
//    // if value > leftMax -> value = leftMax
//    value = min(value, leftMax);
//    // Figure out how 'wide' each range is
//    float leftSpan = leftMax - leftMin;
//    float rightSpan = rightMax - rightMin;

//    // Convert the left range into a 0-1 range (float)
//    float valueScaled = float(value - leftMin) / float(leftSpan);

//    // Convert the 0-1 range into a value in the right range.
//    return rightMin + (valueScaled * rightSpan);
//}


//vec4 project_point_to_lint(vec4 A, vec4 B, vec4 p)
//{
//    vec4 q; // closest point to p on the line segment from A to B

//    vec4 AB = (B-A); // vector from A to B
//    float AB_squared = dot(AB, AB); // squared distance from A to B
//    if (AB_squared == 0.0) {
//        // A and B are the same point
//        q = A;
//    } else {
//        vec4 Ap = (p-A); // vector from A to p
//        float t = dot(Ap, AB) / AB_squared; // A + t (B - A)
//        if ( t < 0.0) // before A on the line, return A
//            q = A;
//        else if (t > 1.0) // after B on the line, return B
//            q = B;
//        else // projection lines inbetween A and B on the line
//            q = A + t * AB;
//    }

//    return q;
//}

